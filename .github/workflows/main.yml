name: MusicFree Debug 构建

on:
  push:
    branches: [ main ]  # 确保分支是 main
    paths: [ 'package.json' ]  # package.json 有变动时触发
  workflow_dispatch:  # 支持手动触发[citation:3][citation:9]
    inputs:
      force_build:
        description: '强制构建'
        required: false
        default: 'false'
        type: boolean

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.version_check.outputs.should_build }}
      version: ${{ steps.version_check.outputs.version }}
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 检查版本和构建条件
        id: version_check
        run: |
          if [ ! -f "package.json" ]; then
            echo "❌ package.json 不存在"
            echo "should_build=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          VERSION=$(node -e "console.log(require('./package.json').version || '')")
          if [ -z "$VERSION" ]; then
            echo "❌ 无法从 package.json 中获取版本号"
            echo "should_build=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "当前版本: $VERSION"
          
          # 主分支推送且 package.json 有变化就构建
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "✅ 主分支推送，构建版本: $VERSION"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.force_build }}" == "true" ]]; then
            echo "🔧 手动触发构建"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "❌ 非主分支且非手动触发构建"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build-debug:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true' # 根据检查结果决定是否运行此job[citation:8]
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: "--max_old_space_size=4096"
      ANDROID_HOME: /usr/local/lib/android/sdk
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 清理磁盘空间
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/local/lib/android/sdk/ndk/*
          df -h

      - name: 设置 JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 缓存依赖
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
            android/app/build
          key: ${{ runner.os }}-rn-${{ hashFiles('package-lock.json', 'android/gradle/wrapper/gradle-wrapper.properties', 'android/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-rn-

      - name: 安装 npm 依赖
        run: npm ci --prefer-offline

      - name: 授予 gradlew 执行权限
        run: chmod +x android/gradlew

      - name: 诊断信息
        run: |
          echo "Node 版本: $(node --version)"
          echo "NPM 版本: $(npm --version)"
          echo "Java 版本: $(java -version 2>&1)"
          echo "Android SDK 组件:"
          sdkmanager --list || true

      - name: 构建 Debug APK
        run: |
          cd android
          ./gradlew clean
          ./gradlew assembleDebug \
            --parallel \
            --build-cache \
            --configure-on-demand \
            --no-daemon \
            --console=verbose
        timeout-minutes: 25

      - name: 列出生成的 APK
        run: |
          echo "📱 生成的 APK 文件:"
          find android/app/build/outputs -name "*.apk" -exec ls -la {} \; || true

      - name: 上传 Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apks-${{ needs.check-version.outputs.version }}
          path: android/app/build/outputs/apk/debug/*.apk
          retention-days: 30

      - name: 构建总结
        run: |
          echo "🎉 Debug 构建成功完成!"
          echo "📦 版本: ${{ needs.check-version.outputs.version }}"
          echo "🚀 触发方式: ${{ github.event_name }}"
          echo "👤 操作者: ${{ github.actor }}"
          echo "📊 产物: debug-apks-${{ needs.check-version.outputs.version }}"
